/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DOG20, DOG20Interface } from "../DOG20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "holders",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "__DOG20_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "holders",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "initMock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e5a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063554f120e1161008c57806395d89b411161006657806395d89b41146101ad578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b8063554f120e1461015c5780635e8c26bd1461017157806370a082311461018457600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc610214565b6040516100e99190610ce9565b60405180910390f35b610105610100366004610bf3565b6102a6565b60405190151581526020016100e9565b6035545b6040519081526020016100e9565b610105610135366004610bb8565b6102bc565b604051601281526020016100e9565b610105610157366004610bf3565b61036b565b61016f61016a366004610c1c565b6103a7565b005b61016f61017f366004610c1c565b610461565b610119610192366004610b65565b6001600160a01b031660009081526033602052604090205490565b6100dc6104bf565b6101056101c3366004610bf3565b6104ce565b6101056101d6366004610bf3565b610567565b6101196101e9366004610b86565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60606036805461022390610da2565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610da2565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b60006102b3338484610574565b50600192915050565b60006102c9848484610698565b6001600160a01b0384166000908152603460209081526040808320338452909152902054828110156103535760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103608533858403610574565b506001949350505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490916102b39185906103a2908690610d8a565b610574565b600054610100900460ff16806103c0575060005460ff16155b6103dc5760405162461bcd60e51b815260040161034a90610d3c565b600054610100900460ff161580156103fe576000805461ffff19166101011790555b610440604051806040016040528060058152602001640444f4732360dc1b8152506040518060400160405280600381526020016204432360ec1b815250610867565b61044a8383610461565b801561045c576000805461ff00191690555b505050565b60005b82518110156104b05761049e83828151811061049057634e487b7160e01b600052603260045260246000fd5b6020026020010151836108d0565b806104a881610ddd565b915050610464565b506104bb30826108d0565b5050565b60606037805461022390610da2565b3360009081526034602090815260408083206001600160a01b0386168452909152812054828110156105505760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161034a565b61055d3385858403610574565b5060019392505050565b60006102b3338484610698565b6001600160a01b0383166105d65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161034a565b6001600160a01b0382166106375760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161034a565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106fc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161034a565b6001600160a01b03821661075e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161034a565b6001600160a01b038316600090815260336020526040902054818110156107d65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161034a565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061080d908490610d8a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161085991815260200190565b60405180910390a350505050565b600054610100900460ff1680610880575060005460ff16155b61089c5760405162461bcd60e51b815260040161034a90610d3c565b600054610100900460ff161580156108be576000805461ffff19166101011790555b6108c66109af565b61044a8383610a1b565b6001600160a01b0382166109265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161034a565b80603560008282546109389190610d8a565b90915550506001600160a01b03821660009081526033602052604081208054839290610965908490610d8a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff16806109c8575060005460ff16155b6109e45760405162461bcd60e51b815260040161034a90610d3c565b600054610100900460ff16158015610a06576000805461ffff19166101011790555b8015610a18576000805461ff00191690555b50565b600054610100900460ff1680610a34575060005460ff16155b610a505760405162461bcd60e51b815260040161034a90610d3c565b600054610100900460ff16158015610a72576000805461ffff19166101011790555b8251610a85906036906020860190610ab0565b508151610a99906037906020850190610ab0565b50801561045c576000805461ff0019169055505050565b828054610abc90610da2565b90600052602060002090601f016020900481019282610ade5760008555610b24565b82601f10610af757805160ff1916838001178555610b24565b82800160010185558215610b24579182015b82811115610b24578251825591602001919060010190610b09565b50610b30929150610b34565b5090565b5b80821115610b305760008155600101610b35565b80356001600160a01b0381168114610b6057600080fd5b919050565b600060208284031215610b76578081fd5b610b7f82610b49565b9392505050565b60008060408385031215610b98578081fd5b610ba183610b49565b9150610baf60208401610b49565b90509250929050565b600080600060608486031215610bcc578081fd5b610bd584610b49565b9250610be360208501610b49565b9150604084013590509250925092565b60008060408385031215610c05578182fd5b610c0e83610b49565b946020939093013593505050565b60008060408385031215610c2e578182fd5b823567ffffffffffffffff80821115610c45578384fd5b818501915085601f830112610c58578384fd5b8135602082821115610c6c57610c6c610e0e565b8160051b604051601f19603f83011681018181108682111715610c9157610c91610e0e565b604052838152828101945085830182870184018b1015610caf578889fd5b8896505b84871015610cd857610cc481610b49565b865260019690960195948301948301610cb3565b509997909101359750505050505050565b6000602080835283518082850152825b81811015610d1557858101830151858201604001528201610cf9565b81811115610d265783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115610d9d57610d9d610df8565b500190565b600181811c90821680610db657607f821691505b60208210811415610dd757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610df157610df1610df8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220632b666f8c72c8727986e707d3ec8319e6c2c1e807d8ee38cf2050b33f3d3c5264736f6c63430008040033";

type DOG20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DOG20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DOG20__factory extends ContractFactory {
  constructor(...args: DOG20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DOG20> {
    return super.deploy(overrides || {}) as Promise<DOG20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DOG20 {
    return super.attach(address) as DOG20;
  }
  connect(signer: Signer): DOG20__factory {
    return super.connect(signer) as DOG20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DOG20Interface {
    return new utils.Interface(_abi) as DOG20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DOG20 {
    return new Contract(address, _abi, signerOrProvider) as DOG20;
  }
}
